from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from decouple import config

TOKEN = config('API_TOKEN')

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

path_accounts = r'D:\Python\english\english_bot\accounts.txt'
path_levels = r'D:\Python\project\Learn_English_bot\levels.txt'
id_user = []
lvl_user = []

inline_back = types.InlineKeyboardMarkup()
inline_back.add(types.InlineKeyboardButton('Backüëà', callback_data='back'))

choice_md = types.InlineKeyboardMarkup(row_width=1)
md_1 = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æü§î', callback_data='new')
md_2 = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ —É—Ä–æ–≤–Ω—èüòå', callback_data='old')
choice_md.add(md_1, md_2)

inline_keyboard = types.InlineKeyboardMarkup()
inline_btn_1 = types.InlineKeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Çüì≤', callback_data='enter')
inline_btn_2 = types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—èüìÑ', callback_data='registration')
inline_keyboard.add(inline_btn_1, inline_btn_2)

inline_levels = types.InlineKeyboardMarkup(row_width=1)
level_1 = types.InlineKeyboardButton('A1(Beginner)', callback_data='A1')
level_2 = types.InlineKeyboardButton('A2(Elementary)', callback_data='A2')
level_3 = types.InlineKeyboardButton('B1(Intermediate)', callback_data='B1')
level_4 = types.InlineKeyboardButton('B2(Upper-Intermediate)', callback_data='B2')
level_5 = types.InlineKeyboardButton('C1(Advanced)', callback_data='C1')
level_6 = types.InlineKeyboardButton('C2(Proficiency)', callback_data='C2')
inline_levels.add(level_1, level_2, level_3, level_4, level_5, level_6)

class Register(StatesGroup):
    enter = State()
    register_account = State()

class Level_english(StatesGroup):
    choice_lvl = State()
    choice = State()
    mode = State()

def check_lvl(data):
    with open(path_levels, 'r') as file:
        if f'{data}, {id_user[0]}' in str(file.readlines()):
            return False
        else:
            return True
def lvl():
    lvl_keyboard = types.InlineKeyboardMarkup()
    with open(path_levels, 'r+') as file:
        for i in str(file.readlines()).split(','):
            lvl_user.append(i)
            if str(id_user[0]) in i:
                lvl_keyboard.add(types.InlineKeyboardButton(str(lvl_user[0])[2:], callback_data=str(lvl_user[0])[2:]))
                lvl_user.clear()
    return lvl_keyboard

@dp.message_handler(commands=['start'], state='*')
async def send_welcome(msg: types.Message, state=FSMContext):
    await msg.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ª–µ–∫—Å–∏–∫–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω—è–º.', reply_markup=inline_keyboard)

#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç
@dp.callback_query_handler(lambda c: c.data == 'back')
async def back_registration(msg: types.CallbackQuery, state=FSMContext):
    await state.finish()
    await msg.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!', reply_markup=inline_keyboard)
    
@dp.callback_query_handler(lambda c: c.data == 'registration', state='*')
async def register(msg: types.CallbackQuery, state=FSMContext):
    await msg.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!")
    await Register.register_account.set()

@dp.callback_query_handler(lambda c: c.data == 'enter', state='*')
async def enter_account(msg: types.CallbackQuery, state=FSMContext):
    await msg.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞!")
    await Register.enter.set()

@dp.message_handler(state=Register.register_account)
async def create_account(msg: types.Message, state=FSMContext):
    with open(path_accounts, 'r+') as file:
        if str(msg.from_id) in str(file.readlines()):
            await msg.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Çü§®. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–æ–π—Ç–∏ –≤ –Ω–µ–≥–æ!", reply_markup=inline_back)
            await state.finish()
        else:
            id_user.clear() 
            file.write(f'{msg.from_id}, {msg.text}\n')
            await msg.answer(f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –í–∞—à –Ω–∏–∫ {msg.text}')
            id_user.append(msg.from_id)
            await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å!üá¨üáß", reply_markup=inline_levels)
            await Level_english.choice_lvl.set()

@dp.message_handler(state=Register.enter)
async def account(msg: types.Message, state=FSMContext):
    with open(path_accounts, 'r+') as file:
        if f'{msg.from_id}, {msg.text}' in str(file.readlines()):
            id_user.clear()
            await msg.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, {msg.text}!', reply_markup=choice_md)
            id_user.append(msg.from_id)
            await Level_english.choice.set()
        else:
            await msg.answer(f'–¢–∞–∫–æ–≥–æ –Ω–∏–∫–∞ –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Öü§®. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ –Ω–∏–∫!')
            await Register.enter.set()
            
# –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
@dp.callback_query_handler(state=Level_english.choice_lvl)
async def level_choice(msg: types.CallbackQuery, state=FSMContext):
    if check_lvl(msg.data) == True:
        with open(path_levels, 'r+') as file:
            file.read()
            file.write(f'{msg.data}, {id_user[0]}\n')
        await msg.message.edit_text('–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª')
        await state.finish()
    else:
        await msg.message.edit_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!üòâ', reply_markup=choice_md)
        await Level_english.choice.set()

@dp.callback_query_handler(state=Level_english.choice)
async def level_choice(msg: types.CallbackQuery, state=FSMContext):
    if msg.data == 'new':
        await msg.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å!üá¨üáß", reply_markup=inline_levels)
        await Level_english.choice_lvl.set()
    else:
        await msg.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –∏–∑—É—á–∞—Ç—å!üá¨üáß", reply_markup=lvl())
        await Level_english.mode.set()

@dp.callback_query_handler(state=Level_english.mode)
async def mode_task(msg: types.CallbackQuery, state=FSMContext):
    await msg.message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ—Ç!')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
